Imports System.IO
Imports Rpa00

Public Class UpdateRobotCommand : Inherits RpaCommandBase
    Private Function Check(ByRef dat As RpaDataWrapper) As Boolean
        If String.IsNullOrEmpty(dat.Project.RootDirectory) Then
            Console.WriteLine($"'RootDirectory' が設定されていません")
            Return False
        End If
        If Not Directory.Exists(dat.Project.RootDirectory) Then
            Console.WriteLine($"RootDirectory '{dat.Project.RootDirectory}' は存在しません")
            Return False
        End If
        If Not Directory.Exists(dat.Project.RootDllDirectory) Then
            Console.WriteLine($"RootDllDirectory '{dat.Project.RootDllDirectory}' は存在しません")
            Return False
        End If
        If dat.Project.RobotAliasDictionary.Count = 0 Then
            Console.WriteLine($"プロジェクトにはロボットが存在しません")
            Return False
        End If
        Return True
    End Function

    Private Function Main(ByRef dat As RpaDataWrapper) As Integer
        Dim i As Integer = -1
        Dim idxtext As String = vbNullString
        Console.WriteLine()
        Do
            idxtext = vbNullString
            Console.WriteLine($"   処理を選択してください")
            Console.WriteLine($"0  カレントロボットの最新アップデート")
            Console.WriteLine($"1  カレントロボットの特定アップデート (作成中...)")
            Console.WriteLine($"2  全てのロボットの最新アップデート")
            Console.WriteLine($"9  中止する")
            idxtext = dat.Transaction.ShowRpaIndicator(dat)
            Console.WriteLine()
            If idxtext = "0" Or idxtext = "1" Or idxtext = "2" Or idxtext = "9" Then
                Exit Do
            End If
        Loop Until False

        If idxtext = "9" Then
            Return 0
        End If

        Select Case idxtext
            Case "0"
                i = CurrentLatestUpdate(dat)
            Case "1"
                i = 0
                'i = CurrentPointUpdate(dat)
            Case "2"
                i = AllLatestUpdate(dat)
        End Select

        Return i
    End Function

    Private Function CurrentLatestUpdate(ByRef dat As Object) As Integer
        Dim robotname As String = dat.Project.RobotName
        Dim jh As New RpaCui.JsonHandler(Of List(Of RpaUpdater))
        Dim rrus As List(Of RpaUpdater) = jh.Load(Of List(Of RpaUpdater))(dat.Project.RootRobotsUpdateFile)
        Dim srus As List(Of RpaUpdater) = jh.Load(Of List(Of RpaUpdater))(dat.Project.SystemRobotsUpdateFile)

        Dim rrus2 As List(Of RpaUpdater) = rrus
        rrus2.Sort(
            Function(before, after)
                Return (before.ReleaseDate < after.ReleaseDate)
            End Function
        )
        Dim srus2 As List(Of RpaUpdater)
        Dim srus2 As List(Of RpaUpdateer) = srus.FindAll(
            Function(ru)
                Return ru.ReleaseDate > rrus2.Last.ReleaseDate
            End Function
        )
        srus2.Sort(
            Function(before, after)
                Return (before.ReleaseDate < after.ReleaseDate)
            End Function
        )

        Dim ck As Boolean = False
        If rrus2.Count > 0 Then
            If srus2.Count = 0 Then
                ck = True
            Else
                If rrus2.Last.ReleaseDate > srus2.Last.ReleaseDate Then
                    ck = True
                End If
            End If
        End If

        If ck Then
            For Each uru In rrus2
                Console.WriteLine($"アップデートを適用")
                Console.WriteLine($"Release Title : {uru.ReleaseTitle}")
                Console.WriteLine($"Release Date  : {uru.ReleaseDate}")
                For Each src In Directory.GetFiles(uru.PackageDirectory)
                    Dim dst As String = $"{RpaCui.SystemUpdateDllDirectory}\{Path.GetFileName(src)}"
                    File.Copy(src, dst, True)
                    Console.WriteLine($"ファイルをコピー  src: '{src}'")
                    Console.WriteLine($"               => dst: '{dst}'")
                Next
                srus.Add(uru)
                jh.Save(Of List(Of RpaUpdater))(dat.Project.SystemRobotsUpdateFile, srus)
            Next
            Console.WriteLine($"アップデートを適用するためには、再起動を行う必要があります")
            Console.WriteLine()
        End If

        If ck Then
            Dim uru As RpaUpdater = rrus2.Last
            Console.WriteLine($"アップデートを適用")
            Console.WriteLine($"Release Title : {uru.ReleaseTitle}")
            Console.WriteLine($"Release Date  : {uru.ReleaseDate}")
            For Each src In Directory.GetFiles(uru.PackageDirectory)
                Dim dst As String = $"{RpaCui.SystemUpdateDllDirectory}\{Path.GetFileName(src)}"
                File.Copy(src, dst, True)
                Console.WriteLine($"ファイルをコピー  src: '{src}'")
                Console.WriteLine($"               => dst: '{dst}'")
            Next
            srus.Add(uru)
            jh.Save(Of List(Of RpaUpdater))(dat.Project.SystemRobotsUpdateFile, srus)
            Console.WriteLine($"アップデートを適用するためには、再起動を行う必要があります")
            Console.WriteLine()
        Else
            Console.WriteLine($"アップデート対象は存在しませんでした")
            Console.WriteLine()
        End If

        Return 0
    End Function

    Private Function AllLatestUpdate(ByRef dat As Object) As Integer
        Dim jh As New RpaCui.JsonHandler(Of RpaUpdater)
        Dim rrus As List(Of RpaUpdater) = jh.Load(Of List(Of RpaUpdater))(dat.Project.RootRobotsUpdateFile)
        Dim srus As List(Of RpaUpdater) = jh.Load(Of List(Of RpaUpdater))(dat.Project.SystemRobotsUpdateFile)
        Dim urus As List(Of RpaUpdater) = New List(Of RpaUpdater)

        For Each robotname In dat.Project.RobotAliasDictionary.Keys
            Dim rrus2 As List(Of RpaUpdater) = rrus.FindAll(
                Function(ru)
                    Return ru.ReleaseTargets.Contains(robotname)
                End Function
            )
            rrus2.Sort(
                Function(before, after)
                    Return (before.ReleaseDate < after.ReleaseDate)
                End Function
            )
            Dim srus2 As List(Of RpaUpdater) = srus.FindAll(
                Function(ru)
                    Return ru.ReleaseTargets.Contains(robotname)
                End Function
            )
            srus2.Sort(
                Function(before, after)
                    Return (before.ReleaseDate < after.ReleaseDate)
                End Function
            )

            If rrus2.Count = 0 Then
                Continue For
            End If
            If rrus2.Count > 0 And srus2.Count = 0 Then
                urus.Add(rrus2.Last)
                Continue For
            End If
            If rrus2.Last.ReleaseDate > srus2.Last.ReleaseDate Then
                urus.Add(rrus2.Last)
                Continue For
            End If
        Next

        If urus.Count > 0 Then
            Console.WriteLine($"アップデートを適用")
            urus.Distinct()
            urus.Sort(
                Function(before, after)
                    Return (before.ReleaseDate < after.ReleaseDate)
                End Function
            )
            For Each uru In urus
                Console.WriteLine($"Release Title : {uru.ReleaseTitle}")
                Console.WriteLine($"Release Date  : {uru.ReleaseDate}")
                For Each src In Directory.GetFiles(uru.PackageDirectory)
                    Dim dst As String = $"{RpaCui.SystemUpdateDllDirectory}\{Path.GetFileName(src)}"
                    File.Copy(src, dst, True)
                    Console.WriteLine($"ファイルをコピー  src: '{src}'")
                    Console.WriteLine($"               => dst: '{dst}'")
                Next
                srus.Add(uru)
            Next
            jh.Save(Of List(Of RpaUpdater))(dat.Project.SystemRobotsUpdateFile, srus)
            Console.WriteLine($"アップデートを適用するためには、再起動を行う必要があります")
            Console.WriteLine()
        Else
            Console.WriteLine($"アップデート対象は存在しませんでした")
            Console.WriteLine()
        End If
        Return 0
    End Function

    'Private Function AllUpdate(ByRef dat As Object) As Integer
    '    Dim srcdir As String = dat.Project.RootDllDirectory
    '    Dim dstdir As String = RpaCui.SystemUpdateDllDirectory
    '    Dim hit As Integer = 0

    '    For Each pair In dat.Project.RobotAliasDictionary
    '        Dim src As String = $"{srcdir}\{pair.Key}.dll"
    '        Dim dst As String = $"{dstdir}\{Path.GetFileName(src)}"
    '        If Not File.Exists(src) Then
    '            Console.WriteLine($"ファイル '{src}' は存在しません")
    '            Console.WriteLine()
    '            Continue For
    '        End If
    '        File.Copy(src, dst, True)
    '        Console.WriteLine($"ファイルをコピー  '{src}'")
    '        Console.WriteLine($"               => '{dst}'")
    '        Console.WriteLine()
    '        hit += 1
    '    Next

    '    If hit = 0 Then
    '        Console.WriteLine($"ディレクトリ '{srcdir}' に対象ファイルは存在しませんでした")
    '        Console.WriteLine()
    '    Else
    '        Console.WriteLine($"アップデートを適用するには、再起動してください")
    '        Console.WriteLine()
    '    End If
    '    Return 0
    'End Function

    'Private Function SelectedUpdate(ByRef dat As Object) As Integer
    '    Dim srcdir As String = dat.Project.RootDllDirectory
    '    Dim dstdir As String = RpaCui.SystemUpdateDllDirectory
    '    Dim hit As Integer = 0
    '    For Each para In dat.Transaction.Parameters
    '        Dim src As String = $"{srcdir}\{para}.dll"
    '        Dim ext As String = Path.GetExtension(src)
    '        Dim dst As String = $"{dstdir}\{Path.GetFileName(src)}"
    '        If Not dat.Project.RobotAliasDictionary.ContainsKey(para) Then
    '            Console.WriteLine($"指定のアップデート対象ロボット '{para}' はプロジェクトに存在しません")
    '            Console.WriteLine()
    '            Continue For
    '        End If
    '        If Not File.Exists(src) Then
    '            Console.WriteLine($"ファイル '{src}' は存在しません")
    '            Console.WriteLine()
    '            Continue For
    '        End If
    '        File.Copy(src, dst, True)
    '        Console.WriteLine($"ファイルをコピー  '{src}'")
    '        Console.WriteLine($"               => '{dst}'")
    '        Console.WriteLine()
    '        hit += 1
    '    Next
    '    If hit = 0 Then
    '        Console.WriteLine($"ディレクトリ '{srcdir}' に対象ファイルは存在しませんでした")
    '        Console.WriteLine()
    '    Else
    '        Console.WriteLine($"アップデートを適用するには、再起動してください")
    '        Console.WriteLine()
    '    End If
    '    Return 0
    'End Function

    Sub New()
        Me.ExecuteHandler = AddressOf Main
        Me.CanExecuteHandler = AddressOf Check
        Me.ExecutableProjectArchitectures = {(New IntranetClientServerProject).GetType.Name}
        Me.ExecutableParameterCount = {0, 0}
    End Sub
End Class
